name: Tag on Release Commit Push

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  check_release:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit to compare

      - name: Check if this is a release commit
        id: check
        shell: bash
        run: |
          set -euo pipefail

          # Get commit message
          MSG=$(git log -1 --format='%s')
          echo "Commit message: $MSG"

          # Check if it's a release commit
          if [[ "$MSG" =~ ^chore\(release\):\ v([0-9]+\.[0-9]+\.[0-9]+)\ \(#[0-9]+\)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "✅ Release commit detected for version: $VERSION"
            echo "is_release=true" >> "$GITHUB_OUTPUT"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Not a release commit"
            echo "is_release=false" >> "$GITHUB_OUTPUT"
          fi

  tag_release:
    needs: check_release
    if: needs.check_release.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version matches file
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ needs.check_release.outputs.version }}"

          # Check version in file
          FILE="src/event_bridge_log_shared/_version.py"
          CURR=$(python -c "import re;print(re.search(r'__version__\\s*=\\s*\"([^\"]+)\"', open(\"$FILE\").read()).group(1))")

          echo "Release version: $VERSION"
          echo "File version: $CURR"

          if [ "$CURR" != "$VERSION" ]; then
            echo "❌ ERROR: Version mismatch. Expected $VERSION, found $CURR in $FILE"
            exit 1
          fi

          echo "✅ Version validation passed"

      - name: Check if tag already exists
        id: check_tag
        shell: bash
        run: |
          TAG="v${{ needs.check_release.outputs.version }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists locally"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          elif git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "Tag $TAG already exists on remote"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Tag $TAG does not exist"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ needs.check_release.outputs.version }}"
          TAG="v$VERSION"
          COMMIT="${{ github.sha }}"

          echo "Creating tag $TAG at commit $COMMIT"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create annotated tag
          git tag -a "$TAG" -m "Release $VERSION" "$COMMIT"

          # Push tag
          git push origin "$TAG"

          echo "✅ Successfully created and pushed tag $TAG"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.check_release.outputs.version }}"
          TAG="v$VERSION"

          gh release create "$TAG" \
            --title "Release $VERSION" \
            --notes "Release $VERSION" \
            --target "${{ github.sha }}"
