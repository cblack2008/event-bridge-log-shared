name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (X.Y.Z). Leave empty to auto-detect from latest tag."
        required: false
  push:
    tags:
      - 'v*.*.*'
  repository_dispatch:
    types: [deploy-release]

jobs:
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      id-token: write  # Required for trusted publishing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Resolve version and tag
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.ref_type }}" = tag ]; then
            # Triggered by tag push
            TAG="${{ github.ref_name }}"  # e.g., v1.2.3
            V="${TAG#v}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Triggered by prepare-release workflow
            TAG="${{ github.event.client_payload.tag }}"
            V="${TAG#v}"
          else
            # Manual workflow dispatch
            V="${{ github.event.inputs.version || '' }}"
            if [ -z "$V" ]; then
              echo "version input is required when not running on a tag ref" >&2
              exit 1
            fi
            TAG="v$V"
          fi
          echo "Resolved version: $V, tag: $TAG"
          echo "VERSION=$V" >> "$GITHUB_ENV"
          echo "TAG=$TAG" >> "$GITHUB_ENV"

      - name: Ensure tag exists and checkout tag
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force
          if ! git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
            echo "Tag ${TAG} not found on remote" >&2
            exit 1
          fi
          git checkout -q "refs/tags/${TAG}"

      - name: Verify version matches tag
        shell: bash
        run: |
          set -euo pipefail
          FILE=src/event_bridge_log_shared/_version.py
          CURR=$(python -c "import re;print(re.search(r'__version__\\s*=\\s*\"([^\"]+)\"', open(\"$FILE\").read()).group(1))")
          echo "repo version: $CURR, tag version: ${VERSION}"
          if [ "$CURR" != "${VERSION}" ]; then
            echo "Version mismatch. Tag ${TAG} implies ${VERSION} but file has $CURR." >&2
            exit 1
          fi

      # Build wheel and source distributions
      - name: Build distributions
        run: |
          python -m pip install -U pip build
          python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
