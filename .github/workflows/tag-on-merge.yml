name: Tag on Release PR Merge

on:
  pull_request_target:
    types: [closed]

jobs:
  tag_release:
    if: ${{ github.event.pull_request.merged && github.event.pull_request.base.ref == 'main' && startsWith(github.event.pull_request.head.ref, 'release/v') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout merge commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Derive tag from branch
        id: tag
        shell: bash
        run: |
          BR='${{ github.event.pull_request.head.ref }}'    # e.g. release/v1.0.9
          TAG="${BR#release/}"                               # -> v1.0.9
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create tag
        uses: anothrNick/github-tag-action@v1.61.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG: ${{ steps.tag.outputs.tag }}
          WITH_V: false
          DRY_RUN: false

  tag_from_push:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Tag HEAD if commit message is a release
        shell: bash
        run: |
          set -euo pipefail
          SUBJ=$(git log -1 --pretty=%s)
          echo "Commit subject: $SUBJ"
          TAG=""
          # Pattern A: direct release subject, e.g. "chore(release): v1.2.3"
          if [[ "$SUBJ" =~ ^chore\(release\):\ (v[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            TAG="${BASH_REMATCH[1]}"
          # Pattern B: merge subject mentioning source branch, e.g. "Merge pull request #123 from org/release/v1.2.3"
          elif [[ "$SUBJ" =~ from[[:space:]].*/(release/v[0-9]+\.[0-9]+\.[0-9]+) ]]; then
            TMP="${BASH_REMATCH[1]}"
            TAG="${TMP#release/}"
          fi
          if [ -z "$TAG" ]; then
            echo "Not a release commit; skipping"
            exit 0
          fi
          echo "Derived tag: $TAG"
          git fetch --tags --force
          if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
            echo "Tag ${TAG} already exists; skipping"
            exit 0
          fi
          git tag -a "${TAG}" -m "release ${TAG}" HEAD
          git push origin "${TAG}"
